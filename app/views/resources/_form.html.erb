<%= form_for([@cookbook, @recipe, @resource], html: { class: "resource form" } ) do |f| %>
<% if @resource.errors.any? %>
<div id="alert alert-danger">
  <h2><%= pluralize(@resource.errors.count, "error") %> prohibited this resource from being saved:</h2>

  <ul>
    <% @resource.errors.full_messages.each do |message| %>
    <li><%= message %></li>
    <% end %>
  </ul>
</div>
<% end %>

<fieldset>
  <legend>Resource</legend>
  <div class="field">
    <%= f.label :recipe_id %>
    <%= @recipe.name %>
    <%= f.hidden_field :recipe_id, read_only: true %>
  </div>
  <div class="field">
    <%= f.label :name %>
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :resource_type %>
    <%= f.text_field :resource_type %>
  </div>
  <div class="field">
    <%= f.label :position %>
    <%= f.select(:position, 1..@resource_count) %>
  </div>
<fieldset>
  <%# Properties require full customization from the user, therefore JS is used
  to produce a dynamic form.
  TODO: Consider an alternative approach using a more "Rails Way" method, as the
   method used now will require major maintenance in the future! %>
  <legend>Properties</legend>
  <span id="error property btn"></span>
  <button id="add property btn" type="button" name="add property">Add Property</button>
  <input id="add property field" type="text" name="add property name">
  <div id="form properties">
    <%= f.fields_for :properties, OpenStruct.new(f.object.properties || {}) do |f2| %>
      <% @resource.properties.each do |key, value| %>
      <div class="field">
        <%= f2.label key %>
        <%= f2.text_field key %>
        <button type="button" name="delete_button" class="delete_button">Delete</button>
      </div>
      <% end %>
    <% end %>
  </div>
</fieldset>
  <div class="field">
    <%= f.label :actions %>
    <%= f.text_field :actions %>
  </div>
</fieldset>
<div class="actions submit button">
  <%= f.submit %>
</div>
<% end %>
